import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class BinPackingHeuristic {
    private List<List<Integer>> loads;
    private List<Integer> cargoWeights;
    private int vehicleCapacity;

    public BinPackingHeuristic(List<Integer> cargoWeights, int vehicleCapacity) {
        this.cargoWeights = cargoWeights;
        this.vehicleCapacity = vehicleCapacity;
        this.loads = new ArrayList<>();
    }

    public void loadCargo() {
        for (Integer weight : cargoWeights) {
            boolean loaded = false;

            // Check if the cargo can be added to an existing load
            for (List<Integer> load : loads) {
                int loadWeight = load.stream().mapToInt(Integer::intValue).sum();
                if (loadWeight + weight <= vehicleCapacity) {
                    load.add(weight);
                    loaded = true;
                    break;
                }
            }

            // If the cargo couldn't be added to an existing load, create a new load
            if (!loaded) {
                List<Integer> newLoad = new ArrayList<>();
                newLoad.add(weight);
                loads.add(newLoad);
            }
        }
    }

    public void displayResult() {
        System.out.println("Result:");
        for (int i = 0; i < loads.size(); i++) {
            System.out.println("Load " + (i + 1) + ": " + loads.get(i));
        }
        System.out.println("Number of loads (M): " + loads.size());
        System.out.println("Number of vehicles required: " + loads.size());
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter cargo weights (comma-separated): ");
        String[] weightsInput = scanner.nextLine().split(",");
        List<Integer> cargoWeights = new ArrayList<>();
        for (String weight : weightsInput) {
            cargoWeights.add(Integer.parseInt(weight.trim()));
        }

        System.out.print("Enter vehicle capacity: ");
        int vehicleCapacity = scanner.nextInt();

        BinPackingHeuristic binPacking = new BinPackingHeuristic(cargoWeights, vehicleCapacity);
        binPacking.loadCargo();
        binPacking.displayResult();
    }
}
