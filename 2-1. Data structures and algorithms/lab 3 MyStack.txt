package lab3;

import java.util.Iterator;
import java.util.*;
import utilities.*;
import utilities.ChangeArrayLength;
import java.util.Random;

public class MyStack extends ArrayStack {
    // Function to randomly shuffle the elements in the stack
    public MyStack rand() {
        int too = 0;
        int[] y = new int[top + 1];

        Random rnd = new Random();
        MyStack sum = this;
        MyStack m = new MyStack();
        for (int i = 0; i <= 99999; i++) {
            int x = rnd.nextInt(top + 1);
            int u = 0;
            for (int o = 0; o <= top; o++) {
                // Check if the randomly generated index is not already in the array
                if (y[o] != x) {
                    u++;
                }
                // If the index is not found in the array, add it
                if (u == top + 1) {
                    y[too] = x;
                    too++;
                }
            }
            if (too == top + 1) {
                break;
            }
        }
        // Push the randomly selected elements into a new stack
        for (int i = 0; i <= top; i++) {
            m.push(this.stack[y[i]]);
        }

        // Copy the elements back to the original stack
        for (int i = 0; i <= top; i++) {
            sum.stack[i] = m.stack[i];
        }
        return sum;
    }

    // Function to remove duplicate elements from the stack
    public MyStack unique() {
        int l = top, o = 0, k = 0, f = 0;
        MyStack sum = this;
        MyStack m = new MyStack();
        for (int i = 0; i <= top; i++) {
            m.push(sum.stack[i]);
        }

        // Loop to identify and remove duplicate elements
        for (int i = 0; i <= top; i++) {
            if (k == 1) {
                i--;
                k = 0;
            }
            for (int j = 0; j <= top; j++) {
                if (stack[i] == stack[j]) {
                    if (i < j) {
                        l = top;
                        // Loop to remove duplicates
                        for (int p = top; p >= 0; p--) {
                            if (p == j) {
                                sum.pop();
                                l++;
                                k++;
                                break;
                            } else {
                                sum.pop();
                                l--;
                            }
                        }
                        // Loop to add the remaining elements back to the stack
                        for (o = l + f; o <= m.top; o++) {
                            if (o != j) {
                                sum.push(m.stack[o]);
                            }
                        }
                        f++;
                    }
                }
            }
        }
        return sum;
    }

    // Function to add an array of elements to the stack
    public MyStack addRange(Object[] elements) {
        MyStack sum = this;
        // Add elements from the array to the stack in reverse order
        for (int i = elements.length - 1; i >= 0; i--) {
            sum.push(elements[i]);
        }
        return sum;
    }

    // Function to convert the stack to an array
    public Object[] toArray(MyStack stack1) {
        Object[] sum = new Object[top + 1];
        // Copy stack elements to the array
        for (int i = 0; i <= top; i++) {
            sum[i] = stack[i];
        }
        return sum;
    }

    // Function to check if a given element exists in the stack
    public boolean exists(Object element) {
        MyStack sum = this;
        // Iterate through the stack to find the element
        for (int i = 0; i < top; i++) {
            if (element == stack[i]) {
                return true;
            }
        }
        return false;
    }

    // Main method to test the functionality
	public static void main(String[] args) {
		MyStack my = new MyStack();
		my.push(1);
		my.push(2);
		my.push(3);
		my.push(4);
		my.push(2);
		my.push(2);
		my.push(3);
		System.out.println(
				"stack:\n___");
		for(int i = my.top ; i >= 0 ; i-- ){
			System.out.println("|"+my.stack[i]+"|");
		}
		System.out.println("---");
		
		System.out.println("randomed stack:\n___");
		my.rand();
		for(int i = my.top ; i >= 0 ; i-- ){
			System.out.println("|"+my.stack[i]+"|");
		}
		System.out.println("---");
		
		System.out.println("uniqued stack:\n___");
		my.unique();
		for(int i = my.top ; i >= 0 ; i-- ){
			System.out.println("|"+my.stack[i]+"|");
		}
		System.out.println("---");
		
		Object[] x = new Object[4];
		x[0] = 0;
		x[1] = 1;
		x[2] = 2;
		x[3] = 3;
		System.out.println("Array:\n___");
		for(int i = 0 ; i < x.length ; i++ ){
			System.out.println("|"+x[i]+"|");
		}
		System.out.println("---");
		
		System.out.println("Ranged stack:\n___");
		my.addRange(x);
		for(int i = my.top ; i >= 0 ; i-- ){
			System.out.println("|"+my.stack[i]+"|");
		}
		System.out.println("---");
		
		System.out.println("Array:\n___ ");
		x = my.toArray(my);
		for(int i = 0 ; i < x.length ; i++ ){
			System.out.println("|"+x[i]+"|");
		}
		System.out.println("---");
		
		Object y = new Object();
		y = 9;
		System.out.println("9 exists in stack: "+my.exists(y));
		
	}

}
