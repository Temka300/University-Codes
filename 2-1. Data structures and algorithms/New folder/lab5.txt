import dataStructures.LinkedBinaryTree;
import dataStructures.ArrayStack;
import java.util.*;

enum ExpressionType{
	INFIX,
	PREFIX,
	POSTFIX;
}

public class Expression extends LinkedBinaryTree{
	private String notationExp;
	private ExpressionType eType;
	Scanner scan;
	public Expression() {
		super();
		notationExp = "";
		eType = ExpressionType.INFIX;
		scan = new Scanner(System.in);
	}
	public void readInfixExpression() {
		eType = ExpressionType.INFIX;
		System.out.println(eType + " ilerhiilel oruul! Operand bolon operatoruudiin hoorond 1 hooson zaitai");
		this.notationExp = scan.nextLine();
	    
	}
	public void readPostfixExpression() {
		eType = ExpressionType.POSTFIX;
		System.out.println(eType + " ilerhiilel oruul! Operand bolon operatoruudiin hoorond 1 hooson zaitai");
		this.notationExp = scan.nextLine();
	}
	public void readPrefixExpression() {
		eType = ExpressionType.PREFIX;
		System.out.println(eType + " ilerhiilel oruul! Operand bolon operatoruudiin hoorond 1 hooson zaitai");
		this.notationExp = scan.nextLine();
	}
	private int Prec(char ch) {
		switch(ch) {
		case '+':
		case '-':
			return 1;
		case '*':
		case '/':
			return 2;
		case '^':
			return 3;
		}
		return -1;
	}
	public void infixToPostfix() {
	    if (eType == ExpressionType.INFIX) {
	        eType = ExpressionType.POSTFIX;
	    }
	    String result = "";
	    ArrayStack stack = new ArrayStack();
	    String[] elems = notationExp.split(" ");

	    for (int i = 0; i < elems.length; i++) {
	        if (Character.isLetterOrDigit(elems[i].charAt(0))) {
	            result += elems[i] + " ";
	        } else if (elems[i].charAt(0) == '(') {
	            stack.push(elems[i]);
	        } else if (elems[i].charAt(0) == ')') {
	            while (!stack.empty() && stack.peek().toString().charAt(0) != '(') {
	                result += stack.peek() + " ";
	                stack.pop();
	            }
	            if (!stack.empty() && stack.peek().toString().charAt(0) == '(') {
	                stack.pop(); // Pop the open parenthesis
	            } else {
	                System.out.println("Buruu ilerhiilel");
	                return; // Exit the method if there's an issue with parentheses
	            }
	        } else {
	            while (!stack.empty() && Prec(elems[i].charAt(0)) <= Prec(stack.peek().toString().charAt(0))) {
	                result += stack.peek() + " ";
	                stack.pop();
	            }
	            stack.push(elems[i]);
	        }
	    }

	    while (!stack.empty()) {
	        result += stack.peek() + " ";
	        stack.pop();
	    }

	    this.notationExp = result.trim();
	}

	public void prefixToPostfix() {
		if(eType == ExpressionType.PREFIX) {
			eType = ExpressionType.POSTFIX;
		}
		String result = new String(" ");
		ArrayStack stack = new ArrayStack();
		String [] elems = notationExp.split(" ");
		
		for(int i=elems.length - 1; i>=0 ;i++ ) {
			if(elems[i].length() == 1 && !Character.isLetterOrDigit(elems[i].charAt(0))) {
				String op1 = stack.peek().toString();
				stack.pop();
				String op2 = stack.peek().toString();
				stack.pop();
				
				String temp = op1 + op2 + elems[i].charAt(0)+" ";
				stack.push(temp);
			}
			else {
				stack.push(elems[i] + " ");
			}
		}
		this.notationExp = stack.peek().toString();
	}
	public void expressionTreeFromPostfix() {
		ArrayStack stN = new ArrayStack();
		Expression t1,t2,temp;
		String [] elems = notationExp.split(" ");
		for(int i = 0; i < elems.length;i++) {
			if(Character.isLetterOrDigit(elems[i].charAt(0))) {
				temp = new Expression();
				temp.makeTree(elems[i],temp,temp);
				stN.push(temp);
			}
			else {
				temp = new Expression();
				
				t1 = (Expression)stN.pop();
				t2 = (Expression)stN.pop();
				temp.makeTree(elems[i].charAt(0),t1,t2);
				stN.push(temp);
			}
		}
		temp = (Expression)stN.pop();
		this.root = temp.root;
	}
    public void evaluateInfixExpression() {
        if (eType == ExpressionType.INFIX) {
            eType = ExpressionType.POSTFIX;
            infixToPostfix();
        }

        ArrayStack stack = new ArrayStack();
        String[] elems = notationExp.split(" ");

        for (String elem : elems) {
            if (Character.isLetterOrDigit(elem.charAt(0))) {
                stack.push(Integer.parseInt(elem));
            } else {
                int operand2 = (int) stack.pop();
                int operand1 = (int) stack.pop();

                switch (elem.charAt(0)) {
                    case '+':
                        stack.push(operand1 + operand2);
                        break;
                    case '-':
                        stack.push(operand1 - operand2);
                        break;
                    case '*':
                        stack.push(operand1 * operand2);
                        break;
                    case '/':
                        stack.push(operand1 / operand2);
                        break;
                    // Add more operators if needed
                }
            }
        }

        int result = (int) stack.pop();
        System.out.println("Result: " + result);
    }
	public void menu() {
		System.out.println("\n--- Комманд сонгох ---");
		System.out.println("1) Infix ilerhiilel oruulah");
		System.out.println("2) Prefix ilerhiilel oruulah");
		System.out.println("3) Postfix ilerhiilel oruulah");
		System.out.println("4) Postfix ilerhiilel hewleh");
		System.out.println("5) prefix ilerhiilel hewleh");
		System.out.println("6) Infix ilerhiilel hewleh");
		System.out.println("7) hariu");
		System.out.println("0) Garah");
	}
	public static void main(String[] args) {
		try {
			Expression myexp = new Expression();
			int command;
			while(true) {
				myexp.menu();
				command = Integer.parseInt(myexp.scan.nextLine());
				switch(command) {
				case 0:
					System.exit(0);
					break;
				case 1:
					myexp.readInfixExpression();
					myexp.infixToPostfix();
					myexp.expressionTreeFromPostfix();
					break;
				case 2:
					myexp.readPrefixExpression();
					myexp.prefixToPostfix();
					myexp.expressionTreeFromPostfix();
					break;
				case 3:
					myexp.readPostfixExpression();
					myexp.expressionTreeFromPostfix();
					break;
				case 4:
					System.out.println("\n postfix ilerhiilel: ");
					myexp.postOrderOutput();
					break;
				case 5:
					System.out.println("\n prefix ilerhiilel: ");
					myexp.preOrderOutput();
					break;
				case 6:
					System.out.println("\n infix ilerhiilel: ");
					myexp.inOrderOutput();
					break;
				case 7:
					System.out.println("\n sum: ");
					myexp.evaluateInfixExpression();
					break;
				default:
					System.out.println("Command zuw songono uu");
					break;
				}
			}
			}catch(Exception ex) {
			System.out.println("ERROR: " + ex.getMessage());
		}
	}
}
