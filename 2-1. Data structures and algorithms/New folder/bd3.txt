import java.util.*;

public class DijkstraAlgorithm {
    private static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        int[][] graph = {
            {0, 2, 4, 0, 0, 0},
            {0, 0, 1, 7, 0, 0},
            {0, 0, 0, 0, 3, 0},
            {0, 0, 0, 0, 0, 1},
            {0, 0, 0, 2, 0, 5},
            {0, 0, 0, 0, 0, 0}
        };

        int startVertex = 0;
        dijkstra(graph, startVertex);
    }

    private static void dijkstra(int[][] graph, int startVertex) {
        int vertices = graph.length;
        int[] distance = new int[vertices];
        boolean[] visited = new boolean[vertices];

        Arrays.fill(distance, INF);
        distance[startVertex] = 0;

        for (int count = 0; count < vertices - 1; count++) {
            int minVertex = findMinDistanceVertex(distance, visited);
            visited[minVertex] = true;

            for (int v = 0; v < vertices; v++) {
                if (!visited[v] && graph[minVertex][v] != 0 && distance[minVertex] != INF
                        && distance[minVertex] + graph[minVertex][v] < distance[v]) {
                    distance[v] = distance[minVertex] + graph[minVertex][v];
                }
            }
        }

        printSolution(distance);
    }

    private static int findMinDistanceVertex(int[] distance, boolean[] visited) {
        int minDistance = INF;
        int minVertex = -1;

        for (int v = 0; v < distance.length; v++) {
            if (!visited[v] && distance[v] <= minDistance) {
                minDistance = distance[v];
                minVertex = v;
            }
        }

        return minVertex;
    }

    private static void printSolution(int[] distance) {
        System.out.println("Vertex \t\t Distance from Source");
        for (int i = 0; i < distance.length; i++) {
            System.out.println(i + " \t\t " + distance[i]);
        }
    }
}
